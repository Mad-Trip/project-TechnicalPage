<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="styles.css">
  <title>Technical Documentation Page</title>
</head>
<body>
  <nav id="navbar">
    <header>Learning CSS</header>
    <ul>
      <li>
        <a class="nav-link" href="#Introduction">Introduction</a>
      </li>
      <li>
        <a class="nav-link" href="#CSS_Selectors">CSS Selectors</a>
      </li>
      <li>
        <a class="nav-link" href="#CSS_Backgrounds">CSS Backgrounds</a>
      </li>
      <li>
        <a class="nav-link" href="#Colors">Colors</a>
      </li>
      <li>
        <a class="nav-link" href="#!important">!important</a>
      </li>
    </ul>
  </nav>
  <main id="main-doc">
    <section id="Introduction" class="main-section">
      <header>Introduction</header>
      <article>
        <header>CSS solved a huge problem</header>
        <p>Before CSS, styling of every kind was done within the html. When tags like <font>, and color attributes were added to the HTML 3.2 specification, it started a nightmare for web developers. Development of large websites, where fonts and color information were added to every single page, became a long and expensive process.</p>
        <p>The style definitions are normally saved in external .css files.

With an external stylesheet file, you can change the look of an entire website by changing just one file!

</p>
      </article>
    </section>
    <section class="main-section" id="CSS_Selectors">
      <header>CSS Selectors</header>
      <article>
        <p>The element selector selects HTML elements based on the element name. CSS selectors are used to "find" (or select) the HTML elements you want to style. We can divide CSS selectors into five categories:</p>
        <li>Simple selectors (select elements based on name, id, class)</li>
        <li>Combinator selectors (select elements based on a specific relationship between them)</li>
        <li>Pseudo-class selectors (select elements based on a certain state)</li>
        <li>Pseudo-elements selectors (select and style a part of an element)</li>
        <li>Attribute selectors (select elements based on an attribute or attribute value)</li>
        <p>The element selector selects HTML elements based on the element name. The id selector uses the id attribute of an HTML element to select a specific element. The id of an element is unique within a page, so the id selector is used to select one unique element! To select an element with a specific id, write a hash (#) character, followed by the id of the element.</p>
      </article>
    </section>
    <section class="main-section" id="CSS_Backgrounds">
      <header>CSS Backgrounds</header>
      <article>
        <p>The CSS background properties are used to add background effects for elements. An example of a background color being set is: <code>body {
  background-color: lightblue;
}</code></p>
        <p>The opacity property specifies the opacity/transparency of an element. It can take a value from 0.0 - 1.0. The lower value, the more transparent. Here is an example of this: <code>div {
  background-color: green;
  opacity: 0.3;
}</code></p>
      </article>
    </section>
    <section class="main-section" id="Colors">
      <header>Colors</header>
      <article>
        <p>Colors are specified using predefined color names, or RGB, HEX, HSL, RGBA, HSLA values. In CSS, a color can be specified as an RGB value, using this formula: rgb(red, green, blue) Each parameter (red, green, and blue) defines the intensity of the color between 0 and 255. For example, rgb(255, 0, 0) is displayed as red, because red is set to its highest value (255) and the others are set to 0. To display black, set all color parameters to 0, like this: rgb(0, 0, 0). To display white, set all color parameters to 255, like this: rgb(255, 255, 255).</p>
        <p>In CSS, a color can be specified using a hexadecimal value in the form:#rrggbb. Where rr (red), gg (green) and bb (blue) are hexadecimal values between 00 and ff (same as decimal 0-255). For example, #ff0000 is displayed as red, because red is set to its highest value (ff) and the others are set to the lowest value (00). To display black, set all values to 00, like this: #000000. To display white, set all values to ff, like this: #ffffff.  </p>
      </article>
    </section>
    <section class="main-section" id="!important">
      <header>!important</header>
      <article>
        <p>The !important rule in CSS is used to add more importance to a property/value than normal. In fact, if you use the !important rule, it will override ALL previous styling rules for that specific property on that element! Let us look at an example: <code>#myid {
  background-color: blue;
}

.myclass {
  background-color: gray;
}

p {
  background-color: red !important;
}</code></p>
        <p>The only way to override an !important rule is to include another !important rule on a declaration with the same (or higher) specificity in the source code - and here the problem starts! This makes the CSS code confusing and the debugging will be hard, especially if you have a large style sheet! Here we have created a simple example. It is not very clear, when you look at the CSS source code, which color is considered most important: <code>#myid {
  background-color: blue !important;
}

.myclass {
  background-color: gray !important;
}

p {
  background-color: red !important;
}</code></p>
        <p>One way to use !important is if you have to override a style that cannot be overridden in any other way. This could be if you are working on a Content Management System (CMS) and cannot edit the CSS code. Then you can set some custom styles to override some of the CMS styles. Another way to use !important is: Assume you want a special look for all buttons on a page. Here, buttons are styled with a gray background color, white text, and some padding and border: <code>.button {
  background-color: #8c8c8c;
  color: white;
  padding: 5px;
  border: 1px solid black;
}</code></p>
      </article>
    </section>
  </main>
</body>
</html>
